#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from hunyuan_video_interface import HunyuanVideoGenerator

def main():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ HunyuanVideo –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    generator = HunyuanVideoGenerator()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    print("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    if not generator.initialize():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏")
        return
    
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    batch_config = [
        {
            "prompt": "A majestic eagle soaring through mountain peaks",
            "video_size": (720, 1280),
            "video_length": 129,
            "infer_steps": 50,
            "cfg_scale": 6.0
        },
        {
            "prompt": "Underwater coral reef with colorful fish swimming",
            "video_size": (720, 1280),
            "video_length": 129,
            "infer_steps": 40,
            "cfg_scale": 7.0
        },
        {
            "prompt": "Time-lapse of a flower blooming in spring garden",
            "video_size": (720, 1280),
            "video_length": 193,  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            "infer_steps": 60,
            "cfg_scale": 5.5
        },
        {
            "prompt": "Futuristic city skyline at night with neon lights",
            "video_size": (1080, 1920),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            "video_length": 129,
            "infer_steps": 45,
            "cfg_scale": 6.5
        }
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"./examples/batch_output_{timestamp}"
    os.makedirs(output_dir, exist_ok=True)
    
    results = []
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for i, config in enumerate(batch_config, 1):
        print(f"\nüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {i}/{len(batch_config)}")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: '{config['prompt']}'")
        print(f"üìê –†–∞–∑–º–µ—Ä: {config['video_size']}")
        print(f"‚è±Ô∏è –î–ª–∏–Ω–∞: {config['video_length']} –∫–∞–¥—Ä–æ–≤")
        print(f"üîß –®–∞–≥–∏: {config['infer_steps']}")
        
        result = generator.generate_video(
            prompt=config["prompt"],
            video_size=config["video_size"],
            video_length=config["video_length"],
            infer_steps=config["infer_steps"],
            embedded_cfg_scale=config["cfg_scale"],
            save_path=output_dir,
            filename=f"batch_video_{i:02d}.mp4"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result["config"] = config
        result["video_number"] = i
        results.append(result)
        
        if result["success"]:
            print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {result['output_path']}")
            print(f"üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏–¥: {result['seed']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    report_path = os.path.join(output_dir, "generation_report.json")
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump({
            "timestamp": timestamp,
            "total_videos": len(batch_config),
            "successful": sum(1 for r in results if r["success"]),
            "failed": sum(1 for r in results if not r["success"]),
            "results": results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìä –û—Ç—á–µ—Ç –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = sum(1 for r in results if r["success"])
    failed = len(results) - successful
    
    print(f"\nüéâ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

if __name__ == "__main__":
    main()
